//
//  WineViewController.swift
//  VYNGLE
//
//  Created by Sujeet on 8/21/17.
//  Copyright (c) 2017 Sujeet. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WineDisplayLogic: class
{
  func displaySomething(_ viewModel: Wine.Something.ViewModel)
}


class WineViewController: UIViewController, WineDisplayLogic, UIScrollViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate
{
    func displaySomething(_ viewModel: Wine.Something.ViewModel) {
        
    }
    
   @IBOutlet weak var viewBottom: CardView!
    @IBOutlet weak var btnCart: UIButton!
    @IBOutlet weak var btnContactUs: UIButton!
    @IBOutlet weak var btnOrder: UIButton!
    @IBOutlet weak var scrollViewMainBg: UIScrollView!
    
    @IBOutlet weak var pageControl: UIPageControl!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var scrollViewFeatureWine: UIScrollView!
    @IBOutlet weak var lblFeatureWineTitle: UILabel!
    @IBOutlet weak var viewFeatureWineTitle: CardView!
    @IBOutlet weak var collectionViewFeatureWine: UICollectionView!
    
    @IBOutlet weak var collectionViewAllWines: UICollectionView!
    @IBOutlet weak var lblAllWinesTitle: UILabel!
    @IBOutlet weak var viewAllWinesTitle: CardView!
    
    
    var marketingTextArray = [Any]()
    var featureWinesArray = [Any]()
    var allWinesArray = [Any]()

    let reuseIdentifierFeatureWines = "cellFeatureWine"
    let reuseIdentifierAllWines = "cellAllWine"

    

    var frame: CGRect = CGRect(x:0, y:0, width:0, height:0)
  var interactor: WineBusinessLogic?
  var router: (NSObjectProtocol & WineRoutingLogic & WineDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  fileprivate func setup()
  {
    let viewController = self
    let interactor = WineInteractor()
    let presenter = WinePresenter()
    let router = WineRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.navigationController?.navigationBar.titleTextAttributes = [ NSFontAttributeName: titleFont!]
    self.view.backgroundColor = wineCollectionViewBgcolor
//    viewFeatureWineTitle.backgroundColor = wineCollectionViewBgcolor
//    viewAllWinesTitle.backgroundColor = wineCollectionViewBgcolor
//    viewBottom.backgroundColor = wineCollectionViewBgcolor
    
    setUpBottomUI()
    doSomething()
    scrollView.delegate = self
    scrollView.isPagingEnabled = true
    
    

//    scrollViewMainBg.contentSize = CGSize(width: scrollViewMainBg.contentSize.width, height: 2000)

    let systemVersion = UIDevice.current.systemVersion

    GetWineListAPI().getWineList(os: os, version: systemVersion, currentViewController:self, completion: { response in
        print("response ", response)
        if response == "Success" {
           print("Response ", response)
            if WineStorage.shared.wineData.server_status != server_status_success {
                return
            }
            self.marketingTextArray = Array(WineStorage.shared.wineData.marketingText)
            if self.marketingTextArray.count > 0 {
                self.setTopUIPart()
                self.configurePageControl()
            }
            self.featureWinesArray = Array(WineStorage.shared.wineData.featureWines)
            self.allWinesArray = Array(WineStorage.shared.wineData.allWines)

            if self.featureWinesArray.count > 0 {
                self.setUpFeatureWineUI()
                self.collectionViewFeatureWine.reloadData()
            }
            if self.allWinesArray.count > 0 {
                self.setUpAllWineUI()
                self.collectionViewAllWines.reloadData()
            }
            
        }
    })
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.title = "Shop with Vyngle".localizedUppercase
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.title = ""
    }
    

    
    func setUpFeatureWineUI() {
        collectionViewFeatureWine.backgroundColor = wineCollectionViewBgcolor
        self.lblFeatureWineTitle.text = "Feature Wines".localizedCapitalized
        self.lblFeatureWineTitle.font = wineTitle
 /*       self.lblFeatureWineTitle.layer.borderWidth = 1
        self.lblFeatureWineTitle.layer.borderColor = wineCollectionViewBorderColor.cgColor
        
        viewFeatureWineTitle.layer.cornerRadius = 2.0
        viewFeatureWineTitle.layer.masksToBounds = true
        lblFeatureWineTitle.layer.cornerRadius = 5.0
        lblFeatureWineTitle.layer.shadowColor = UIColor.black.cgColor
        lblFeatureWineTitle.layer.shadowOpacity = 0.5
        lblFeatureWineTitle.layer.shadowRadius = 0.5
        lblFeatureWineTitle.layer.shadowOffset = CGSize.zero*/

    }
    
    func setUpAllWineUI() {
        collectionViewAllWines.backgroundColor = wineCollectionViewBgcolor
        self.lblAllWinesTitle.text = "All Wines".localizedCapitalized
        self.lblAllWinesTitle.font = wineTitle
 /*       self.lblAllWinesTitle.layer.borderWidth = 1
        self.lblAllWinesTitle.layer.borderColor = wineCollectionViewBorderColor.cgColor
        
        viewAllWinesTitle.layer.cornerRadius = 2.0
        viewAllWinesTitle.layer.masksToBounds = true
        lblAllWinesTitle.layer.cornerRadius = 5.0
        lblAllWinesTitle.layer.shadowColor = UIColor.black.cgColor
        lblAllWinesTitle.layer.shadowOpacity = 0.5
        lblAllWinesTitle.layer.shadowRadius = 0.5
        lblAllWinesTitle.layer.shadowOffset = CGSize.zero*/
        
    }

    
    func setTopUIPart() {
        for index in 0..<marketingTextArray.count {
            frame.origin.x = self.scrollView.frame.size.width * CGFloat(index)
            frame.size = self.scrollView.frame.size
            var marketingTextObject = MarketingText()
            marketingTextObject = self.marketingTextArray[index] as! MarketingText
            let backGroundImage = UIImageView(frame:frame )
            self.scrollView.addSubview(backGroundImage)
            backGroundImage.downloadImageFrom(link: marketingTextObject.image, contentMode: UIViewContentMode.scaleAspectFill)
            let labelMsg = UILabel(frame: CGRect(x:frame.origin.x + 50, y:10, width:self.view.frame.size.width - 100, height:80))
            labelMsg.numberOfLines = 0
            labelMsg.textAlignment = NSTextAlignment.center
            labelMsg.text = marketingTextObject.text
            labelMsg.backgroundColor = UIColor.clear
            labelMsg.textColor = UIColor.white
            self.scrollView.addSubview(labelMsg)
        }
        self.scrollView.contentSize = CGSize(width:self.scrollView.frame.size.width * CGFloat(marketingTextArray.count),height: self.scrollView.frame.size.height)
        pageControl.addTarget(self, action: #selector(self.changePage(sender:)), for: UIControlEvents.valueChanged)
    }
    
    
    func configurePageControl() {
        // The total number of pages that are available is based on how many available colors we have.
        self.pageControl.numberOfPages = marketingTextArray.count
        self.pageControl.currentPage = 0
        self.pageControl.tintColor = UIColor.red
        self.pageControl.pageIndicatorTintColor = UIColor.black
        self.pageControl.currentPageIndicatorTintColor = UIColor.green
    }
    
    // MARK : TO CHANGE WHILE CLICKING ON PAGE CONTROL
    func changePage(sender: AnyObject) -> () {
        let x = CGFloat(pageControl.currentPage) * scrollView.frame.size.width
        scrollView.setContentOffset(CGPoint(x:x, y:0), animated: true)
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        
        let pageNumber = round(scrollView.contentOffset.x / scrollView.frame.size.width)
        pageControl.currentPage = Int(pageNumber)
    }

  
    func setUpBottomUI() {
        btnContactUs.titleLabel?.textAlignment = NSTextAlignment.center;
        btnOrder = CommonMethods().makeButtonRound(btn: btnOrder)
        btnContactUs = CommonMethods().makeButtonRound(btn: btnContactUs)
        btnCart = CommonMethods().makeButtonRound(btn: btnCart)
        btnOrder.titleLabel?.text = "orders".localizedCapitalized
        btnContactUs.titleLabel?.text = "contactUs".localizedCapitalized
        btnCart.titleLabel?.text = "cart".localizedCapitalized
        btnOrder.backgroundColor = roundButtonColorHomeScreen
        btnContactUs.backgroundColor = roundButtonColorHomeScreen
        btnCart.backgroundColor = roundButtonColorHomeScreen
        btnOrder.setTitleColor(roundButtonFontColorHomeScreen, for: .normal)
        btnContactUs.setTitleColor(roundButtonFontColorHomeScreen, for: .normal)
        btnCart.setTitleColor(roundButtonFontColorHomeScreen, for: .normal)
        btnOrder.titleLabel?.font = roundButtonFontHomeScreen
        btnContactUs.titleLabel?.font = roundButtonFontHomeScreen
        btnCart.titleLabel?.font = roundButtonFontHomeScreen
//        viewBottom.layer.borderWidth = 1
//        viewBottom.layer.borderColor = roundButtonViewBorderColorHomeScreen.cgColor

    }
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBAction func btnCartClicked(_ sender: Any) {
    }
  
    @IBAction func btnContactUsClicked(_ sender: Any) {
    }
    @IBAction func btnOrderClicked(_ sender: Any) {
    }
  func doSomething()
  {
    let request = Wine.Something.Request()
    interactor?.doSomething(request)
  }
    
    // MARK: - UICollectionViewDataSource protocol
    
    // tell the collection view how many cells to make
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == collectionViewFeatureWine {
            return self.featureWinesArray.count
        }
        else if collectionView == collectionViewAllWines {
            return self.allWinesArray.count
        }
        return 1
    }
    
    // make a cell for each cell index path
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == collectionViewFeatureWine {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifierFeatureWines, for: indexPath as IndexPath) as! WineBottleCollectionViewCell
            var featureWineObject = FeatureWines()
            featureWineObject = self.featureWinesArray[indexPath.row] as! FeatureWines
//            cell.viewBottleMain.layer.borderWidth = 1
//            cell.viewBottleMain.layer.borderColor = wineCollectionViewBorderColor.cgColor
            cell.lblBottleFlag.font = wineType
            cell.lblBottleWineName.font = wineName
            cell.lblDiscountedPrice.font = winePrice
            cell.lblActualPrice.font = winePrice
            if featureWineObject.last_bottles  {
                cell.lblBottleFlag.text = "Last Bottle".localizedCapitalized
            }
            else if featureWineObject.nw_item {
                cell.lblBottleFlag.text = "New".localizedCapitalized
            }
            else {
                cell.lblBottleFlag.text = ""
            }
            cell.lblBottleWineName.text = featureWineObject.product_name
            cell.lblDiscountedPrice.text = "S$" +  featureWineObject.discount_bottle_price.description
            if featureWineObject.discount_bottle_price.truncatingRemainder(dividingBy: 1) == 0 {
                cell.lblDiscountedPrice.text = "S$" +  Int(featureWineObject.discount_bottle_price).description
            }
            var attributeString: NSMutableAttributedString = NSMutableAttributedString(string: "Retail".localizedCapitalized + ": S$" + featureWineObject.bottle_price.description)
            
            if featureWineObject.bottle_price.truncatingRemainder(dividingBy: 1) == 0 {
                attributeString = NSMutableAttributedString(string: "Retail".localizedCapitalized + ": S$" + Int(featureWineObject.bottle_price).description)
            }
            attributeString.addAttribute(NSBaselineOffsetAttributeName, value: 0, range: NSMakeRange(0, attributeString.length))
            attributeString.addAttribute(NSStrikethroughStyleAttributeName, value: 2, range: NSMakeRange(8, attributeString.length - 8))
            cell.lblActualPrice.attributedText = attributeString
            
//            let path = UIBezierPath(roundedRect:cell.viewBottleBottom.bounds,
//                                    byRoundingCorners:[.bottomLeft, .bottomRight],
//                                    cornerRadii: CGSize(width: 5.5, height:  5.5))
//            let maskLayer = CAShapeLayer()
//            maskLayer.path = path.cgPath
//            cell.viewBottleBottom.layer.mask = maskLayer
//            cell.viewBottleBottom.clipsToBounds = true
//            cell.layer.cornerRadius = 2.0
//            cell.layer.masksToBounds = true
//            cell.viewBottleMain.layer.cornerRadius = 5.0
//            cell.viewBottleMain.layer.shadowColor = UIColor.black.cgColor
//            cell.viewBottleMain.layer.shadowOpacity = 0.5
//            cell.viewBottleMain.layer.shadowRadius = 0.5
//            cell.viewBottleMain.layer.shadowOffset = CGSize.zero
            return cell
        }
        else if collectionView == collectionViewAllWines {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifierAllWines, for: indexPath as IndexPath) as! WineBottleCollectionViewCell
            var allWinesObject = AllWines()
            allWinesObject = self.allWinesArray[indexPath.row] as! AllWines
//            cell.viewBottleMain.layer.borderWidth = 1
//            cell.viewBottleMain.layer.borderColor = wineCollectionViewBorderColor.cgColor
            cell.lblBottleFlag.font = wineType
            cell.lblBottleWineName.font = wineName
            cell.lblDiscountedPrice.font = winePrice
            cell.lblActualPrice.font = winePrice
            if allWinesObject.last_bottles  {
                cell.lblBottleFlag.text = "Last Bottle".localizedCapitalized
            }
            else if allWinesObject.nw_item {
                cell.lblBottleFlag.text = "New".localizedCapitalized
            }
            else {
                cell.lblBottleFlag.text = ""
            }
            cell.lblBottleWineName.text = allWinesObject.product_name
            cell.lblDiscountedPrice.text = "S$" +  allWinesObject.discount_bottle_price.description
            
            if allWinesObject.discount_bottle_price.truncatingRemainder(dividingBy: 1) == 0 {
                cell.lblDiscountedPrice.text = "S$" +  Int(allWinesObject.discount_bottle_price).description
            }
            var attributeString: NSMutableAttributedString = NSMutableAttributedString(string: "Retail".localizedCapitalized + ": S$" + allWinesObject.bottle_price.description)
            
            if allWinesObject.bottle_price.truncatingRemainder(dividingBy: 1) == 0 {
                attributeString = NSMutableAttributedString(string: "Retail".localizedCapitalized + ": S$" + Int(allWinesObject.bottle_price).description)
            }
            attributeString.addAttribute(NSBaselineOffsetAttributeName, value: 0, range: NSMakeRange(0, attributeString.length))
            attributeString.addAttribute(NSStrikethroughStyleAttributeName, value: 2, range: NSMakeRange(8, attributeString.length - 8))
            cell.lblActualPrice.attributedText = attributeString
            
//            let path = UIBezierPath(roundedRect:cell.viewBottleBottom.bounds,
//                                    byRoundingCorners:[.bottomLeft, .bottomRight],
//                                    cornerRadii: CGSize(width: 5.5, height:  5.5))
//            let maskLayer = CAShapeLayer()
//            maskLayer.path = path.cgPath
//            cell.viewBottleBottom.layer.mask = maskLayer
//            cell.viewBottleBottom.clipsToBounds = true
//            cell.layer.cornerRadius = 2.0
//            cell.layer.masksToBounds = true
//            cell.viewBottleMain.layer.cornerRadius = 5.0
//            cell.viewBottleMain.layer.shadowColor = UIColor.black.cgColor
//            cell.viewBottleMain.layer.shadowOpacity = 0.5
//            cell.viewBottleMain.layer.shadowRadius = 0.5
//            cell.viewBottleMain.layer.shadowOffset = CGSize.zero
            
            
            return cell
        }
        return UICollectionViewCell()
    }
    
    // MARK: - UICollectionViewDelegate protocol
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // handle tap events
        print("You selected cell #\(indexPath.item)!")
        if collectionView == collectionViewFeatureWine {
            var featureWineObject = FeatureWines()
            featureWineObject = self.featureWinesArray[indexPath.row] as! FeatureWines
//            do {
//                try WineStorage().setCurrentProduct(productId: featureWineObject.product_id)
//            }
//            catch {
//                
//            }
            let detailVC = storyboard?.instantiateViewController(withIdentifier: "detailVC") as! WineDetailViewController
            detailVC.currentProductId = featureWineObject.product_id
            navigationController?.pushViewController(detailVC, animated: true)
            

        }
        else if collectionView == collectionViewAllWines {
            var allWinesObject = AllWines()
            allWinesObject = self.allWinesArray[indexPath.row] as! AllWines
//            do {
//                try WineStorage().setCurrentProduct(productId: allWinesObject.product_id)
//            }
//            catch {
//                
//            }
            let detailVC = storyboard?.instantiateViewController(withIdentifier: "detailVC") as! WineDetailViewController
            detailVC.currentProductId = allWinesObject.product_id
            navigationController?.pushViewController(detailVC, animated: true)
            

        }
    }
}

extension Sequence where Iterator.Element == [String:Any] {
    
    func values(of key: String) -> [Any] {
        return self.flatMap {$0[key]}
    }
}

extension UIImageView {
    func downloadImageFrom(link:String, contentMode: UIViewContentMode) {
        URLSession.shared.dataTask( with: NSURL(string:link)! as URL, completionHandler: {
            (data, response, error) -> Void in
            DispatchQueue.main.async() {
                self.contentMode =  contentMode
                if let data = data { self.image = UIImage(data: data) }
            }
        }).resume()
    }
}


