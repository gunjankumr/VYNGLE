//
//  WineDetailViewController.swift
//  VYNGLE
//
//  Created by Sujeet on 8/21/17.
//  Copyright (c) 2017 Sujeet. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GMStepper


protocol WineDetailDisplayLogic: class
{
  func displaySomething(_ viewModel: WineDetail.Something.ViewModel)
}

class WineDetailViewController: UIViewController, WineDetailDisplayLogic, UICollectionViewDataSource, UICollectionViewDelegate
{
  var interactor: WineDetailBusinessLogic?
  var router: (NSObjectProtocol & WineDetailRoutingLogic & WineDetailDataPassing)?
//    @IBOutlet weak var collectionViewWineBottlesImages: UICollectionView!

    @IBAction func btnConfirmAddressClicked(_ sender: Any) {
    }
    @IBOutlet weak var btnConfirmAddress: UIButton!
    @IBOutlet weak var viewBotomButton: UIView!
    @IBOutlet weak var stepper: GMStepper!
    @IBOutlet weak var tableView: UITableView!

    var imageListArray = [Any]()
    var currentProductId = ""
    var productData = ProductDetailDS()


  // MARK: Object lifecycle
  
    let reuseIdentifierWinesImages = "cellBottleImages"

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  fileprivate func setup()
  {
    let viewController = self
    let interactor = WineDetailInteractor()
    let presenter = WineDetailPresenter()
    let router = WineDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
    
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.navigationController?.navigationBar.titleTextAttributes = [ NSFontAttributeName: titleFont!]

  //  hideInitialialView()
//    setBorderOfAllViews()
    doSomething()
    self.navigationController?.interactivePopGestureRecognizer?.isEnabled = false
    tableView.rowHeight = UITableViewAutomaticDimension
    tableView.estimatedRowHeight = 140
    tableView.backgroundColor = wineCollectionViewBgcolor

    setupUI()
    stepper.addTarget(self, action: #selector(self.stepperValueChanged), for: .valueChanged)

    ProductDetailsStorage.shared.deleteProductDetailData()
    let systemVersion = UIDevice.current.systemVersion

    GetProductDetailAPI().getProductDetail(os: os, version: systemVersion, productId: currentProductId, currentViewController: self, completion: { response in
        print("response ", response)
        if response == "Success" {
//            print("Response ", response)
            if ProductDetailsStorage.shared.productDetailsData.server_status != server_status_success {
                return
            }
            self.imageListArray = Array(ProductDetailsStorage.shared.productDetailsData.image_list)
            // Sorting array on priority
            self.imageListArray = (self.imageListArray as NSArray).sortedArray(using: [NSSortDescriptor(key: "priority", ascending: true)]) as! [ImageList]

            if !ProductDetailsStorage.shared.productDetailsData.product_id.isEmpty {
//                self.setUpCompleteDetailInfo()
                self.stepper.label.numberOfLines = 0
                self.stepper.labelFont = stepperFont!
                self.setStepperText()
                self.productData = ProductDetailsStorage.shared.productDetailsData
                self.tableView.reloadData()

            }
//            if self.imageListArray.count > 0 {
//              //  self.collectionViewWineBottlesImages.reloadData()
//            }
        }
    })
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.title = "Wine Details".localizedUppercase
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.title = ""
    }
    
    func setupUI() {
        btnConfirmAddress.setTitle("Confirm Address".localizedUppercase, for: UIControlState.normal)
        btnConfirmAddress.titleLabel?.font = buttonFont
    }



    func setUpCompleteDetailInfo() {
//        lblProductName.text = ProductDetailsStorage.shared.productDetailsData.product_name
//        
//        var critic1_score = ProductDetailsStorage.shared.productDetailsData.critic1_initial
//        var critic2_score = ProductDetailsStorage.shared.productDetailsData.critic2_initial
//        var critic3_score = ProductDetailsStorage.shared.productDetailsData.critic3_initial
//
//        if Int(ProductDetailsStorage.shared.productDetailsData.critic1_score) > 0 {
//            critic1_score = critic1_score + " " + Int(ProductDetailsStorage.shared.productDetailsData.critic1_score).description
//        }
//        
//        if Int(ProductDetailsStorage.shared.productDetailsData.critic2_score) > 0 {
//            critic2_score = critic2_score + " " + Int(ProductDetailsStorage.shared.productDetailsData.critic2_score).description
//        }
//
//        if Int(ProductDetailsStorage.shared.productDetailsData.critic3_score) > 0 {
//            critic3_score = critic3_score + " " + Int(ProductDetailsStorage.shared.productDetailsData.critic3_score).description
//        }
//        
//        if !critic1_score.trimmingCharacters(in: .whitespaces).isEmpty {
//            lblCriticOneScore.text = critic1_score
//        }
//        else {
//            lblCriticOneScore.isHidden = true
//        }
//
//        if !critic2_score.trimmingCharacters(in: .whitespaces).isEmpty {
//            lblCriticTwoScore.text = critic2_score
//        }
//        else {
//            lblCriticTwoScore.isHidden = true
//        }
//        
//        if !critic3_score.trimmingCharacters(in: .whitespaces).isEmpty {
//            lblCriticThreeScore.text = critic3_score
//        }
//        else {
//            lblCriticThreeScore.isHidden = true
//        }
//
//        if critic1_score.trimmingCharacters(in: .whitespaces).isEmpty && critic2_score.trimmingCharacters(in: .whitespaces).isEmpty &&
//            critic3_score.trimmingCharacters(in: .whitespaces).isEmpty {
//            
//            viewCriticsScoreHeightCons.constant = 0
//        }
//        
//        lblProductNotes.text = "The vineyard is sited on top of the Blewitt Springs range, and runs east/west with a gentle slope kicking down to the southeast. I believe Blewitt Springs has an amazing micro-climate that can produce world class wines, but its quality is very site specific and you need the right site to capture its magic."
//        lblCountryValue.text = ProductDetailsStorage.shared.productDetailsData.country
//        lblRegionValue.text = ProductDetailsStorage.shared.productDetailsData.region
//        lblTypeValue.text = ProductDetailsStorage.shared.productDetailsData.type
//        lblMoreInfoText.text = ProductDetailsStorage.shared.productDetailsData.additional_information
    }
    
    func caseDiscountText() -> NSMutableAttributedString {
        let caseDiscountText = "Case Discount!".localizedUppercase
        let attributeStringCaseDiscount: NSMutableAttributedString = NSMutableAttributedString(string: caseDiscountText)
        attributeStringCaseDiscount.addAttribute(NSForegroundColorAttributeName, value: wineDiscountTextColor , range: NSMakeRange(0, attributeStringCaseDiscount.length))
        return attributeStringCaseDiscount
    }
    
    func freeShippingText() -> NSMutableAttributedString {
        let freeShippingText = "Free Shipping!".localizedUppercase
        let attributeStringFreeShipping: NSMutableAttributedString = NSMutableAttributedString(string: freeShippingText)
        attributeStringFreeShipping.addAttribute(NSForegroundColorAttributeName, value: wineDiscountTextColor , range: NSMakeRange(0, attributeStringFreeShipping.length))
        return attributeStringFreeShipping
    }
    
    func caseBottleCountText(numCase: Int, numBottle: Int) -> NSMutableAttributedString {
        var textForCaseAndBottle = ""
        if numCase == 1 {
            textForCaseAndBottle = "1 " + "case".localizedLowercase
        }
        else if numCase > 1 {
            textForCaseAndBottle = "\(numCase)" + " " + "cases".localizedLowercase
        }
        
        if numBottle == 1 {
            if textForCaseAndBottle.isEmpty {
                textForCaseAndBottle = "1 " + "bottle".localizedLowercase
            }
            else {
                textForCaseAndBottle = textForCaseAndBottle + " + 1 " + "bottle".localizedLowercase
            }
        }
        else if numBottle > 1 {
            if textForCaseAndBottle.isEmpty {
                textForCaseAndBottle = "\(numBottle)" + " " + "bottles".localizedLowercase
            }
            else {
                textForCaseAndBottle = textForCaseAndBottle + " + " + "\(numBottle)" + " " + "bottles".localizedLowercase
            }
        }
        
        let attributeStringForCounting: NSMutableAttributedString = NSMutableAttributedString(string: textForCaseAndBottle)
        return attributeStringForCounting
    }
    
    func actualPrice(numCase: Int, numBottle: Int, caseActualPrice: Double, bottleActualPrice: Double, currency: String) -> NSMutableAttributedString {
        let totalActualCasePrice: Double = caseActualPrice * Double(numCase)
        let totalActualBottlePrice: Double  = bottleActualPrice * Double(numBottle)
        let finalActualPrice:Double = totalActualCasePrice + totalActualBottlePrice
        
        var actualPrice: String = String(finalActualPrice)
        print("actualPrice " + actualPrice)
        if finalActualPrice.truncatingRemainder(dividingBy: 1) == 0 {
            actualPrice = Int(finalActualPrice).description
            print("actualPrice " + actualPrice)

        }
        print("actualPrice " + actualPrice)

        actualPrice = currency + " " + actualPrice
        
        let attributeStringForActualPrice: NSMutableAttributedString = NSMutableAttributedString(string: String(actualPrice))
        print("attributeStringForActualPrice.length ", attributeStringForActualPrice.length)
        attributeStringForActualPrice.addAttribute(NSBaselineOffsetAttributeName, value: 0, range: NSMakeRange(0, attributeStringForActualPrice.length))
        attributeStringForActualPrice.addAttribute(NSStrikethroughStyleAttributeName, value: 1, range: NSMakeRange(0, attributeStringForActualPrice.length))
        
        return attributeStringForActualPrice
    }
    
    func discountedPrice(numCase: Int, numBottle: Int, caseDiscountedPrice: Double, bottleDiscountedPrice: Double, currency: String) -> NSMutableAttributedString {
        
        let totalDiscountedCasePrice: Double = caseDiscountedPrice * Double(numCase)
        let totalDiscountedBottlePrice: Double  = bottleDiscountedPrice * Double(numBottle)
        let finalDiscountedPrice:Double = totalDiscountedCasePrice + totalDiscountedBottlePrice
        
        var discountedPrice = String(finalDiscountedPrice)
        if finalDiscountedPrice.truncatingRemainder(dividingBy: 1) == 0 {
            discountedPrice = Int(finalDiscountedPrice).description
        }
        
        discountedPrice = currency + " " + discountedPrice

        let attributeStringForDiscountedPrice: NSMutableAttributedString = NSMutableAttributedString(string: discountedPrice)
        return attributeStringForDiscountedPrice
    }
    
    func setStepperText() {
        let numCase = Int(stepper.value) / Int(ProductDetailsStorage.shared.productDetailsData.botpercase)
        let numBottle = Int(stepper.value.truncatingRemainder(dividingBy: Double(ProductDetailsStorage.shared.productDetailsData.botpercase)))
        print("numCase " + String(numCase) + " numBottle " + String(numBottle))
        
        let attributeStringStepper: NSMutableAttributedString = self.caseBottleCountText(numCase: numCase, numBottle: numBottle)
        attributeStringStepper.append(NSAttributedString(string:"\n"))
        attributeStringStepper.append(self.discountedPrice(numCase: numCase, numBottle: numBottle, caseDiscountedPrice: ProductDetailsStorage.shared.productDetailsData.discount_case_price, bottleDiscountedPrice: ProductDetailsStorage.shared.productDetailsData.discount_bottle_price, currency: ProductDetailsStorage.shared.productDetailsData.currency))
        attributeStringStepper.append(NSAttributedString(string:"\n"))
        
        attributeStringStepper.append(self.actualPrice(numCase: numCase, numBottle: numBottle, caseActualPrice: ProductDetailsStorage.shared.productDetailsData.case_price, bottleActualPrice: ProductDetailsStorage.shared.productDetailsData.bottle_price, currency: ProductDetailsStorage.shared.productDetailsData.currency))
        
        if ProductDetailsStorage.shared.productDetailsData.discount_eligible {
            attributeStringStepper.append(NSAttributedString(string:"\n"))
            attributeStringStepper.append(self.caseDiscountText())
        }
        
        if ProductDetailsStorage.shared.productDetailsData.free_shipping {
            attributeStringStepper.append(NSAttributedString(string:"\n"))
            attributeStringStepper.append(self.freeShippingText())
        }
        
        stepper.label.attributedText = attributeStringStepper

    }
    
    func stepperValueChanged(stepper: GMStepper) {
        print(stepper.value, terminator: "")
        self.setStepperText()
    }
    
 
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = WineDetail.Something.Request()
    interactor?.doSomething(request)
  }
  
  func displaySomething(_ viewModel: WineDetail.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    // MARK: - UICollectionViewDataSource protocol
    
    // tell the collection view how many cells to make
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.imageListArray.count
    }
    
    
    // make a cell for each cell index path
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifierWinesImages, for: indexPath as IndexPath) as! ImageCollectionViewCell
        
            cell.productImageView.layer.borderWidth = 1
            cell.productImageView.layer.borderColor = roundButtonViewBorderColorHomeScreen.cgColor

            var winesImageObject = ImageList()
            winesImageObject = self.imageListArray[indexPath.row] as! ImageList
            cell.productImageView.downloadImageFrom(link: winesImageObject.image_path, contentMode: UIViewContentMode.scaleAspectFit)
            return cell
    }
    
    // MARK: - UICollectionViewDelegate protocol
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // handle tap events
        print("You selected cell #\(indexPath.item)!")
        
    }
}


extension WineDetailViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 7
    }
    
    func tableView(_ tableView: UITableView,
                   cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellImage = tableView.dequeueReusableCell(withIdentifier: "ProductImageTableViewCell",
                                                 for: indexPath) as! ProductImageTableViewCell
        let cellProdName = tableView.dequeueReusableCell(withIdentifier: "ProductNameTableViewCell",
                                                 for: indexPath) as! ProductNameTableViewCell
        let cellScore = tableView.dequeueReusableCell(withIdentifier: "ProductScoreTableViewCell",
                                                 for: indexPath) as! ProductScoreTableViewCell
        let cellGenInfo = tableView.dequeueReusableCell(withIdentifier: "ProductGeneralInfoTableViewCell", for: indexPath) as! ProductGeneralInfoTableViewCell
        let cellMoreInfo = tableView.dequeueReusableCell(withIdentifier: "ProductMoreInfoTableViewCell",
                                                 for: indexPath) as! ProductMoreInfoTableViewCell
        let cellCritics = tableView.dequeueReusableCell(withIdentifier: "ProductCriticsTableViewCell",
                                                 for: indexPath) as! ProductCriticsTableViewCell
        let cellWineMaker = tableView.dequeueReusableCell(withIdentifier: "ProductWineMakerNotesTableViewCell",
                                                 for: indexPath) as! ProductWineMakerNotesTableViewCell
//        cellImage.backgroundColor = wineCollectionViewBgcolor
        cellProdName.backgroundColor = UIColor.clear
        cellScore.backgroundColor = UIColor.clear
        cellGenInfo.backgroundColor = UIColor.clear
        cellMoreInfo.backgroundColor = UIColor.clear
        cellCritics.backgroundColor = UIColor.clear
        cellWineMaker.backgroundColor = UIColor.clear

        
        if !self.productData.product_id.isEmpty {
            if indexPath.row == 0 {
                cellImage.productImageCollectionView.delegate = self;
                cellImage.productImageCollectionView.dataSource = self;
                cellImage.productImageCollectionView.reloadData();
                return cellImage
            }
            else if indexPath.row == 1 {
                cellProdName.productNameLabel.text = self.productData.product_name
                return cellProdName
            }
            else if indexPath.row == 2 {
                var critic1_score = productData.critic1_initial
                var critic2_score = productData.critic2_initial
                var critic3_score = productData.critic3_initial
        
                if Int(productData.critic1_score) > 0 {
                    critic1_score = critic1_score + " " + Int(productData.critic1_score).description
                }
        
                if Int(productData.critic2_score) > 0 {
                    critic2_score = critic2_score + " " + Int(productData.critic2_score).description
                }
        
                if Int(productData.critic3_score) > 0 {
                    critic3_score = critic3_score + " " + Int(productData.critic3_score).description
                }
        
                if !critic1_score.trimmingCharacters(in: .whitespaces).isEmpty {
                    cellScore.criticScore1Label.text = critic1_score
                }
                else {
                    cellScore.criticScore1Label.isHidden = true
                }
        
                if !critic2_score.trimmingCharacters(in: .whitespaces).isEmpty {
                    cellScore.criticScore2Label.text = critic2_score
                }
                else {
                    cellScore.criticScore2Label.isHidden = true
                }
        
                if !critic3_score.trimmingCharacters(in: .whitespaces).isEmpty {
                    cellScore.criticScore3Label.text = critic3_score
                }
                else {
                    cellScore.criticScore3Label.isHidden = true
                }
        
                if critic1_score.trimmingCharacters(in: .whitespaces).isEmpty && critic2_score.trimmingCharacters(in: .whitespaces).isEmpty &&
                    critic3_score.trimmingCharacters(in: .whitespaces).isEmpty {
                    
                    cellScore.isHidden = true
                }
                return cellScore
            }
            else if indexPath.row == 3 {
                cellGenInfo.productGeneralInfoLabel.text = self.productData.additional_information
                return cellGenInfo
            }
            else if indexPath.row == 4 {
                cellMoreInfo.productMoreInfoLabel.text = self.productData.product_name
                return cellMoreInfo
            }
            else if indexPath.row == 5 {
                cellCritics.productCriticsLabel.text = self.productData.tasting_notes
                return cellCritics
            }
            else if indexPath.row == 6 {
                cellWineMaker.productWineMakerNotesLabel.text = self.productData.wine_maker_notes
                return cellWineMaker
            }

        }
        return cellProdName
    }
}

extension WineDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableViewAutomaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    }
}


